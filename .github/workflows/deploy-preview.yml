name: Manage Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  pull_request_target:
    types: [closed]

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: terraform
  DOCKERFILE_PATH: docker/Dockerfile
  DOCKER_BUILD_CONTEXT: docker

jobs:
  manage_environment:
    runs-on: ubuntu-latest
    name: Manage Preview Environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Apply
        if: github.event.action != 'closed'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -input=false

      - name: Check Merge Status
        if: github.event.action == 'closed'
        id: check_merge
        run: |
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            echo "::notice::PR was merged, destroying environment"
            echo "should_destroy=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::PR was closed without merge, destroying environment"
            echo "should_destroy=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: steps.check_merge.outputs.should_destroy == 'true'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Destroying preview environment..."
          terraform destroy -auto-approve -input=false

      - name: Login to Amazon ECR
        if: github.event.action != 'closed'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Terraform Outputs
        if: github.event.action != 'closed'
        id: tf-outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform output -json > tf_output.json
          echo "cluster_name=$(jq -r '.ecs_cluster_name.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "service_name=$(jq -r '.ecs_service_name.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "repo_url=$(jq -r '.ecr_repository_url.value' tf_output.json)" >> $GITHUB_OUTPUT

          REPO_URL=$(jq -r '.ecr_repository_url.value' tf_output.json)
          if [[ ! "$REPO_URL" =~ ^[0-9]+\.dkr\.ecr\..*\.amazonaws\.com/.* ]]; then
            echo "::error::Invalid ECR repository URL format: $REPO_URL"
            exit 1
          fi

      - name: Build and Push Docker Image
        if: github.event.action != 'closed'
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ steps.tf-outputs.outputs.repo_url }}:${{ env.IMAGE_TAG }} \
                       -t ${{ steps.tf-outputs.outputs.repo_url }}:latest \
                       -f ${{ env.DOCKERFILE_PATH }} \
                       ${{ env.DOCKER_BUILD_CONTEXT }}
          docker push ${{ steps.tf-outputs.outputs.repo_url }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.tf-outputs.outputs.repo_url }}:latest

      - name: Update ECS Service
        if: github.event.action != 'closed'
        run: |
          aws ecs update-service \
            --cluster ${{ steps.tf-outputs.outputs.cluster_name }} \
            --service ${{ steps.tf-outputs.outputs.service_name }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Verify Deployment
        if: github.event.action != 'closed'
        run: |
          aws ecs wait services-stable \
            --cluster ${{ steps.tf-outputs.outputs.cluster_name }} \
            --services ${{ steps.tf-outputs.outputs.service_name }} \
            --region ${{ env.AWS_REGION }}

      - name: Get Public IP
        if: github.event.action != 'closed'
        id: get_ip
        working-directory: ${{ env.TF_WORKING_DIR }}
        timeout-minutes: 5
        run: |
          CLUSTER=$(terraform output -raw ecs_cluster_name)
          SERVICE=$(terraform output -raw ecs_service_name)

          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster "$CLUSTER" \
            --services "$SERVICE" \
            --region "${{ env.AWS_REGION }}" || \
            echo "::warning::Service took longer than expected to stabilize"

          TASK_ARN=$(aws ecs list-tasks \
            --cluster "$CLUSTER" \
            --service-name "$SERVICE" \
            --query 'taskArns[0]' \
            --output text)

          if [ "$TASK_ARN" = "None" ] || [ -z "$TASK_ARN" ]; then
            echo "::error::No running ECS task found."
            exit 1
          fi

          echo "Task ARN: $TASK_ARN"

          ENI_ID=$(aws ecs describe-tasks \
            --cluster "$CLUSTER" \
            --tasks "$TASK_ARN" \
            --query 'tasks[0].attachments[?type==`ElasticNetworkInterface`].details[?name==`networkInterfaceId`].value' \
            --output text)

          echo "Network Interface ID: $ENI_ID"

          TRIES=0
          PUBLIC_IP=""
          while [ -z "$PUBLIC_IP" ] && [ $TRIES -lt 6 ]; do
            echo "Attempt $((TRIES + 1)) to get public IP..."
            PUBLIC_IP=$(aws ec2 describe-network-interfaces \
              --network-interface-ids "$ENI_ID" \
              --query 'NetworkInterfaces[0].Association.PublicIp' \
              --output text)
            sleep 10
            TRIES=$((TRIES + 1))
          done

          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
            echo "::error::Failed to retrieve public IP after retries"
            exit 1
          fi

          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "::notice::Application URL: http://$PUBLIC_IP"
