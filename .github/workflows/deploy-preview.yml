name: Deploy to ECS with Terraform

on:
  # Trigger the pipeline on pull requests or manual dispatch
  workflow_dispatch:
    inputs:
      action: # Input to choose between 'create' or 'destroy'
        description: "Choose whether to create or destroy the environment"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - destroy

jobs:
  deploy:
    name: Deploy or Destroy Environment
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Step 3: Initialize Terraform
      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      # Step 4: Apply or Destroy with Terraform
      - name: Apply or Destroy Infrastructure
        working-directory: terraform
        run: |
          if [ "${{ github.event.inputs.action }}" == "create" ]; then
            echo "Creating the environment..."
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            echo "Destroying the environment..."
            terraform destroy -auto-approve
          else
            echo "Invalid action! Please choose 'create' or 'destroy'."
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 5: Log Terraform Outputs (Only for Create Action)
      - name: Log Terraform Outputs
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: terraform
        run: |
          echo "ECR Repository URL: $(terraform output -raw ecr_repository_url)"
          echo "ECS Service Name: $(terraform output -raw ecs_service_name)"
          echo "ECS Cluster Name: $(terraform output -raw ecs_cluster_name)"
          echo "::set-output name=ecr_repository_url::$(terraform output -raw ecr_repository_url)"
          echo "::set-output name=ecs_service_public_ip::$(terraform output -raw ecs_service_public_ip)"

      # Step 6: Log in to Amazon ECR (Only for Create Action)
      - name: Log in to Amazon ECR
        if: ${{ github.event.inputs.action == 'create' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 7: Build, Tag, and Push Docker Image (Only for Create Action)
      - name: Build, Tag, and Push Docker Image
        if: ${{ github.event.inputs.action == 'create' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.deploy.outputs.ecr_repository_url }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./docker
          # Push the Docker image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 8: Deploy to ECS (Only for Create Action)
      - name: Deploy to ECS
        if: ${{ github.event.inputs.action == 'create' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: terraform/ecs-task-definition.json
          service: my-furniture-service
          cluster: my-furniture-cluster
          wait-for-service-stability: true
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}