name: Manage Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: terraform
  DOCKERFILE_PATH: docker/Dockerfile
  DOCKER_BUILD_CONTEXT: docker

jobs:
  manage_environment:
    runs-on: ubuntu-latest
    name: Manage Preview Environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      # If PR is opened or updated, apply infrastructure
      - name: Terraform Apply
        if: github.event.action != 'closed'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -input=false

   
    
      # If PR is closed, destroy infrastructure
      - name: Terraform Destroy
        if: github.event.action == 'closed'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve -input=false

      # Only build/deploy if creating or updating PR
      - name: Login to Amazon ECR
        if: github.event.action != 'closed'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Terraform Outputs
        if: github.event.action != 'closed'
        id: tf-outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform output -json > tf_output.json
          echo "cluster_name=$(jq -r '.ecs_cluster_name.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "service_name=$(jq -r '.ecs_service_name.value' tf_output.json)" >> $GITHUB_OUTPUT
          echo "repo_url=$(jq -r '.ecr_repository_url.value' tf_output.json)" >> $GITHUB_OUTPUT
          
          # Validate ECR URL format
          REPO_URL=$(jq -r '.ecr_repository_url.value' tf_output.json)
          if [[ ! "$REPO_URL" =~ ^[0-9]+\.dkr\.ecr\..*\.amazonaws\.com/.* ]]; then
            echo "::error::Invalid ECR repository URL format: $REPO_URL"
            exit 1
          fi

      - name: Build and Push Docker Image
        if: github.event.action != 'closed'
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ steps.tf-outputs.outputs.repo_url }}:${{ env.IMAGE_TAG }} \
                       -t ${{ steps.tf-outputs.outputs.repo_url }}:latest \
                       -f ${{ env.DOCKERFILE_PATH }} \
                       ${{ env.DOCKER_BUILD_CONTEXT }}
                       docker push ${{ steps.tf-outputs.outputs.repo_url }}:${{ env.IMAGE_TAG }}
                       docker push ${{ steps.tf-outputs.outputs.repo_url }}:latest

      - name: Update ECS Service
        if: github.event.action != 'closed'
        run: |
          aws ecs update-service \
            --cluster ${{ steps.tf-outputs.outputs.cluster_name }} \
            --service ${{ steps.tf-outputs.outputs.service_name }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Verify Deployment
        if: github.event.action != 'closed'
        run: |
          aws ecs wait services-stable \
            --cluster ${{ steps.tf-outputs.outputs.cluster_name }} \
            --services ${{ steps.tf-outputs.outputs.service_name }} \
            --region ${{ env.AWS_REGION }}