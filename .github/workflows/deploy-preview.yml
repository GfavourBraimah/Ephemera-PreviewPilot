name: Deploy to ECS with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose whether to create or destroy the environment"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - destroy

jobs:
  deploy:
    name: Deploy or Destroy Environment
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # ✅ Step 2: Configure AWS credentials globally
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      # Step 3: Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Step 4: Initialize Terraform
      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      # ✅ Step 5: Apply or Destroy Infrastructure (NO env override!)
      - name: Apply or Destroy Infrastructure
        working-directory: terraform
        run: |
          if [ "${{ github.event.inputs.action }}" == "create" ]; then
            echo "Creating the environment..."
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            echo "Destroying the environment..."
            terraform destroy -auto-approve
          else
            echo "Invalid action! Please choose 'create' or 'destroy'."
            exit 1
          fi

      # Step 6: Get Terraform Outputs (only on create)
      - name: Log Terraform Outputs
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: terraform
        run: |
          terraform output -raw ecr_repository_url > ecr_url.txt
          cat ecr_url.txt

      # Step 7: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        if: ${{ github.event.inputs.action == 'create' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: "us-east-1"

      # ✅ Step 8: Build, Tag, and Push Docker Image (no manual AWS env needed)
      - name: Build, Tag, and Push Docker Image
        if: ${{ github.event.inputs.action == 'create' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ECR_REPO=$(terraform -chdir=terraform output -raw ecr_repository_url | sed 's|.*amazonaws.com/||')
          docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG ./docker
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

      # Step 9: Deploy to ECS
      - name: Deploy to ECS
        if: ${{ github.event.inputs.action == 'create' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: terraform/ecs-task-definition.json
          service: my-furniture-service
          cluster: my-furniture-cluster
          wait-for-service-stability: true
